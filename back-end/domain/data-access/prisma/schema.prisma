generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Profile {
    id                 Int      @id @default(autoincrement())
    email              String   @unique
    password           String
    role               String?
    username           String     @unique
    bio                String?
    createdAt          DateTime
    latestActivity     DateTime
    publishedResources Resource[] @relation("publishedResources")
    writtenComments    Comment[]  @relation("writtenComments")
    likedResources     Like[]
}

model Resource {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime
    title       String
    description String
    category    String
    subject     String
    creatorId   Int
    creator     Profile   @relation("publishedResources", fields: [creatorId], references: [id], onDelete: Cascade)
    comments    Comment[] @relation("commentsOnResource")
    upvoters    Like[]
}

model Comment {
    id         Int       @id @default(autoincrement())
    message    String
    createdAt  DateTime
    edited     Boolean
    profileId  Int
    profile    Profile   @relation("writtenComments", fields: [profileId], references: [id], onDelete: Cascade)
    resourceId Int?
    resource   Resource? @relation("commentsOnResource", fields: [resourceId], references: [id], onDelete: Cascade)
    likers     Like[]
    parentId   Int?
    parent     Comment? @relation("parentComment", fields: [parentId], references: [id], onDelete: Cascade)
    childComments Comment[] @relation("parentComment")
}

model Like {
    id         Int       @id @default(autoincrement())
    createdAt  DateTime
    profileId  Int
    resourceId Int?
    commentId  Int?
    upvoter    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
    resource   Resource? @relation(fields: [resourceId], references: [id], onDelete: Cascade)
    comment    Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}
